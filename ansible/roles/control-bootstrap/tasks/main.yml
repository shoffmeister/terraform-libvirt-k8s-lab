---
- name: "Pull Kubernetes images"
  become: true
  ansible.builtin.shell:
    cmd: |
      kubeadm config images pull
  changed_when: true


- name: Initialize the Kubernetes cluster using kubeadm
  become: true
  ansible.builtin.shell:
    cmd: |
      kubeadm init --control-plane-endpoint '{{ APISERVER_VIP }}:{{ APISERVER_DEST_PORT }}' --upload-certs \
        --ignore-preflight-errors=FileAvailable--etc-kubernetes-manifests
  changed_when: true
  when: ansible_facts['default_ipv4']['address'] == BOOTSTRAP_IP

- name: Generate a control plane certificate for HA nodes
  become: true
  ansible.builtin.shell:
    executable: /usr/bin/bash
    cmd: |
      set -o pipefail
      kubeadm init phase upload-certs --upload-certs 2> /dev/null | tail -n 1
  register: join_certificate
  when: ansible_facts['default_ipv4']['address'] == BOOTSTRAP_IP

- name: Prepare the command to join the Kubernetes cluster
  become: true
  ansible.builtin.shell:
    executable: /usr/bin/bash
    cmd: |
      set -o pipefail
      kubeadm token create --print-join-command --certificate-key {{ join_certificate.stdout }} \
        | echo "$(cat -) --ignore-preflight-errors=FileAvailable--etc-kubernetes-manifests"
  register: join_command
  when: ansible_facts['default_ipv4']['address'] == BOOTSTRAP_IP

- name: Set join control plane command
  ansible.builtin.set_fact:
    join_control_plane_command: "{{ join_command.stdout }}"
  when: ansible_facts['default_ipv4']['address'] == BOOTSTRAP_IP


- name: Join the other control plane nodes to create a cluster
  become: true
  # Without throttling, the combination of HAProxy and keepalived
  # many result in an API server not _really_ being _ready_
  # The result of that then can be timeouts talking to the
  # affected cluster node's etcd, for instance, resulting in
  # a totally broken cluster (which cannot be repaired by
  # kubeadm reset, it appears)
  throttle: 1
  ansible.builtin.shell:
    cmd: |
      {{ hostvars['10.17.3.2'].join_control_plane_command }}
  changed_when: true
  when: ansible_facts['default_ipv4']['address'] != BOOTSTRAP_IP

- name: Setup kubeconfig
  become: true
  ansible.builtin.command: "{{ item }}"
  with_items:
    - mkdir -p /root/.kube
    - cp -i /etc/kubernetes/admin.conf /root/.kube/config
  changed_when: true

######################

- name: Wait for Kubernetes API server to be available everywhere
  ansible.builtin.wait_for:
    port: 6443

- name: Install Cilium CNI overlay into cluster
  ansible.builtin.shell:
    cmd: |
      CILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/master/stable.txt)
      CLI_ARCH=amd64
      if [ "$(uname -m)" = "aarch64" ]; then CLI_ARCH=arm64; fi
      curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
      sha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum
      sudo tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin
      rm cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
      cilium install

- name: Wait for Cilium to be available
  ansible.builtin.wait_for:
    port: 4240
  # amend timeout virtual machine
